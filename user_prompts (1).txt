API / Lambda input json in the body

{
  "body":"{\"prefix\":\"ask_question\",\"content\":\"\\\"What is the benifit of using LanChain prompt Template\\\"\"}",
   "isBase64Encoded":false
}

{
"body": "{\"prefix\":\"generate_code\",\"content\":\"\\nIdentify the top 5 most viewed anime titles for the current year and calculate the average view count per episode for each anime released in the current year.\\n\"}",
"isBase64Encoded": false
}

{
    "body": "{\"prefix\":\"translate_code\",\"content\":\"//Legacy Java Code\\npublic class AnimationRenderer {\\n    private static final int FRAME_WIDTH = 640;\\n    private static final int FRAME_HEIGHT = 480;\\n\\n    public static void renderAnimation(List<Frame> frames, String outputPath) {\\n        try (FileOutputStream outputStream = new FileOutputStream(outputPath)) {\\n            outputStream.write(ByteBuffer.allocate(4).putInt(frames.size()).array());\\n\\n            for (Frame frame : frames) {\\n                outputStream.write(ByteBuffer.allocate(4).putInt(FRAME_WIDTH).array());\\n                outputStream.write(ByteBuffer.allocate(4).putInt(FRAME_HEIGHT).array());\\n\\n                for (int y = 0; y < FRAME_HEIGHT; y++) {\\n                    for (int x = 0; x < FRAME_WIDTH; x++) {\\n                        Color color = frame.getPixel(x, y);\\n                        outputStream.write(ByteBuffer.allocate(4)\\n                                .putInt((color.getRed() << 16) | (color.getGreen() << 8) | color.getBlue())\\n                                .array());\\n                    }\\n                }\\n            }\\n        } catch (IOException e) {\\n            System.err.println(\\\"Error writing animation file: \\\" + e.getMessage());\\n        }\\n    }\\n}\\n\"}",
    "isBase64Encoded": false
}
{
  "body": "{\"prefix\":\"analyze_code\",\"content\":\"\\nimport cv2\\nfrom collections import deque\\n\\ndef detect_anime_character(frame, character_cascade, pts):\\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\\n    characters = character_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))\\n\\n    for (x, y, w, h) in characters:\\n        center = (x + w // 2, y + h // 2)\\n        pts.appendleft(center)\\n\\n        for i in range(1, len(pts)):\\n            thickness = int(np.sqrt(64 / float(i + 1)) * 2.5)\\n            cv2.line(frame, pts[i - 1], pts[i], (0, 0, 255), thickness)\\n\\n        cv2.circle(frame, center, 5, (0, 0, 255), -1)\\n        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)\\n\\n    return frame, pts\\n\\ncharacter_cascade = cv2.CascadeClassifier('anime_character_detector.xml')\\npts = deque(maxlen=64)\\n\\ncap = cv2.VideoCapture('anime_video.mp4')\\nwhile True:\\n    ret, frame = cap.read()\\n    if not ret:\\n        break\\n\\n    frame, pts = detect_anime_character(frame, character_cascade, pts)\\n    cv2.imshow('Anime Character Tracker', frame)\\n\\n    if cv2.waitKey(1) & 0xFF == ord('q'):\\n        break\\n\\ncap.release()\\ncv2.destroyAllWindows()\"}",
    "isBase64Encoded": false
}



-================================
#### Generate SQL query user prompt ####


Identify the top 5 most viewed anime titles for the current year and calculate the average view count per episode for each anime released in the current year.


#### Code translation user prompt ####


//Legacy Java Code
public class AnimationRenderer {
    private static final int FRAME_WIDTH = 640;
    private static final int FRAME_HEIGHT = 480;

    public static void renderAnimation(List<Frame> frames, String outputPath) {
        try (FileOutputStream outputStream = new FileOutputStream(outputPath)) {
            outputStream.write(ByteBuffer.allocate(4).putInt(frames.size()).array());

            for (Frame frame : frames) {
                outputStream.write(ByteBuffer.allocate(4).putInt(FRAME_WIDTH).array());
                outputStream.write(ByteBuffer.allocate(4).putInt(FRAME_HEIGHT).array());

                for (int y = 0; y < FRAME_HEIGHT; y++) {
                    for (int x = 0; x < FRAME_WIDTH; x++) {
                        Color color = frame.getPixel(x, y);
                        outputStream.write(ByteBuffer.allocate(4)
                                .putInt((color.getRed() << 16) | (color.getGreen() << 8) | color.getBlue())
                                .array());
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error writing animation file: " + e.getMessage());
        }
    }
}


#### Code analysis user prompt ####


import cv2
from collections import deque

def detect_anime_character(frame, character_cascade, pts):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    characters = character_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in characters:
        center = (x + w // 2, y + h // 2)
        pts.appendleft(center)

        for i in range(1, len(pts)):
            thickness = int(np.sqrt(64 / float(i + 1)) * 2.5)
            cv2.line(frame, pts[i - 1], pts[i], (0, 0, 255), thickness)

        cv2.circle(frame, center, 5, (0, 0, 255), -1)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    return frame, pts

character_cascade = cv2.CascadeClassifier('anime_character_detector.xml')
pts = deque(maxlen=64)

cap = cv2.VideoCapture('anime_video.mp4')
while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame, pts = detect_anime_character(frame, character_cascade, pts)
    cv2.imshow('Anime Character Tracker', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

